1. Расширяемость:
Паттерн «Стратегия» позволяет инкапсулировать алгоритмы (в моем случае – логику валидации
и расчёта стоимости упаковки) в отдельные типы, удовлетворяющие общему интерфейсу (Packaging).
 Это означает, что для добавления нового типа упаковки достаточно реализовать новый тип, который
 будет удовлетворять интерфейсу, без изменения существующего кода.
 Таким образом, приложение становится легко расширяемым.

2. Разделение обязанностей:
Использование паттерна позволяет отделить бизнес-логику заказа (например, принятие, выдача, возврат) от логики, связанной с упаковкой.
Это снижает связность компонентов и улучшает читаемость и поддерживаемость кода, поскольку каждая стратегия отвечает за свою часть функционала.

3. Упрощение поддержки:
При добавлении новой упаковки (например, "ящик", "контейнер" или что-либо еще)
мне достаточно реализовать новый тип, не затрагивая код хранилища или другие бизнес-методы.
Это помогает избежать ошибок, связанных с модификацией большого объёма кода, и упрощает тестирование новых вариантов.

4. Гибкость конфигурации:
Поскольку упаковка может быть комбинируемой (например, основная упаковка плюс дополнительная пленка),
паттерн «Стратегия» позволяет легко комбинировать различные стратегии.
В моем решении мы разделяем строку с упаковкой по символу «+» и для каждой стратегии рассчитываем стоимость,
что делает решение гибким и адаптируемым к изменению требований.